아래가 첫 제출 코드 모습이다. TLE 뜸.
이 문제는 trees의 크기를 알 수 없기 때문에 나는 시간 복잡도를 못 구했다.
먼저 연령이 어린 것부터 처리하라는 조건을 읽고 처음에 한번 나무들을 역순으로 정렬해놓고 처리할 때 뒤에서부터 읽으면 되겠다는 생각은 들었다.
그렇게 되면 리스트 append는 뒤에서부터 추가하기 때문에 별개의 추가 과정없이 알아서 어린 순으로 처리하게 된다. 좌표 정렬 순서는 상관없다.
문제는 trees 1차원 배열에 나무들을 쭉 담아두면 모든 원소를 일일히 다 확인해야 한다. 
그러나 어린 순으로 양분을 빨다가 더이상 양분이 불충분해질 경우 해당 칸 위치에 있는 더 늙은 나무들은 볼 필요없이 break하면 처리 시간이 줄 것이다.
하지만 1차원 배열로는 그게 불가능하다.

trees.reverse()

for i in range(k):
    #봄
    for j in range(len(trees)-1, -1, -1):
        q, w, e = trees[j]

        if arr[q][w] >= e:
            arr[q][w] -= e
            trees[j][2] += 1
        else: trees[j][2] = -trees[j][2]

    #여름
    for j in range(len(trees)-1, -1, -1):
        q, w, e = trees[j]

        if e < 0:
            arr[q][w] -= trees[j][2]//2
            del trees[j]
    
    #가을
    for j in range(len(trees)):
        q, w, e = trees[j]

        if e % 5 == 0:
           for k in range(8):
                if 0<=q+dx[k]<n and 0<=w+dy[k]<n:
                    trees.append([q+dx[k], w+dy[k], 1])
    
    #겨울
    for j in range(n):
        for k in range(n):
            arr[j][k] += a[j][k]

두번째로 틀렸던 수정 코드. 뒤진 나무, 성장중인 나무를 담을 배열 두 개를 선언하고 trees를 처리하면서 각각에 담아나갔다.
근데 리스트 삽입 연산은 시간 복잡도가 O(n)이다. 삭제(del)도 마찬가지로 O(n). 여기서 불필요한 시간 소요 발생.
아래 코드 같은 경우 WA 뜸.
틀린 이유는 처음에 역순으로 정렬했지만 각 배열에 나눠 담는 과정에서 작은 것부터 먼저 처리하므로 goheads의 순서가 역이 되어버림.
거기다가 뒤에서 나이 1인 나무들을 추가하면서 정렬이 엉망이 되어버림.

for i in range(k):
    goheads = []
    throwaways = []

    #봄
    for j in range(len(trees)-1, -1, -1):
        q, w, e = trees[j]

        if arr[q][w] >= e:
            arr[q][w] -= e
            trees[j][2] += 1
            goheads.append(trees[j])
        else: 
            #trees[j][2] = -trees[j][2]
            throwaways.append(trees[j])

    #여름
    #for j in range(len(trees)-1, -1, -1):
    for j in range(len(throwaways)-1, -1, -1):
        q, w, e = throwaways[j]

        arr[q][w] += e//2
    
    #가을
    for j in range(len(goheads)):
        q, w, e = goheads[j]

        if e % 5 == 0:
           for k in range(8):
                if 0<=q+dx[k]<n and 0<=w+dy[k]<n:
                    goheads.append([q+dx[k], w+dy[k], 1])
    
    #겨울
    for j in range(n):
        for k in range(n):
            arr[j][k] += a[j][k]

    trees = goheads

아래가 AC 뜬 코드. 맞왜틀씨좆하면서 반례 찾다가 의도치 않게 힌트를 얻어버려서 풀게 됐다.
각 좌표마다 배열을 따로 만들어서 순서대로 정리하면 된다. 처리하다가 양분 떨어지면 바로 break.

for i in range(K):
    for j in range(n):
        for k in range(n):
            dead = -1

            for h in range(len(containers[j][k])-1, -1, -1):
                if arr[j][k] >= containers[j][k][h]:
                    arr[j][k] -= containers[j][k][h]
                    containers[j][k][h] += 1
                else:
                    dead = h
                    break

            for h in range(dead, -1, -1):
                arr[j][k] += containers[j][k][h]//2
                del containers[j][k][h]

    for j in range(n):
        for k in range(n):
            arr[j][k] += a[j][k]

            for h in range(len(containers[j][k])-1, -1, -1):
                if containers[j][k][h] % 5 == 0:
                    for tt in range(8):
                        if 0<=j+dx[tt]<n and 0<=k+dy[tt]<n:
                            containers[j+dx[tt]][k+dy[tt]].append(1)
